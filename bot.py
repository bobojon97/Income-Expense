import psycopg2
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
from config import *
from aiogram.types import KeyboardButton

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db():
    conn = psycopg2.connect(
        host=host,
        port=int(port),
        user=user,
        password=password,
        database=database
    )
    return conn

bot = Bot(token=TOKKEN)

dp = Dispatcher(bot, storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è FSM
class AddIncomeExpense(StatesGroup):
    add_income = State()
    add_income_amount = State()
    add_income_description = State()
    add_expense = State() 
    add_expense_amount = State()
    add_expense_description = State()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
add_income_button = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥')
add_expense_button = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥')
incomes_button = types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Ö–æ–¥—ã')
expenses_button = types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã')
total_icome_expense = types.KeyboardButton('–ò—Ç–æ–≥')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(add_income_button)
keyboard.add(add_expense_button)
keyboard.add(incomes_button)
keyboard.add(expenses_button)
keyboard.add(total_icome_expense)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.reply('<b>–ü—Ä–∏–≤–µ—Ç! –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã, –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –∫–æ–Ω–µ—á–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç–µ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏</b>', parse_mode='html', reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"
@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥')
async def add_income_handler(message: types.Message):
    await message.reply('<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞</b>:', parse_mode='html')
    await AddIncomeExpense.add_income_amount.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞
@dp.message_handler(state=AddIncomeExpense.add_income_amount)
async def process_income_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['income_amount'] = message.text

    await message.reply('<b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞</b>:', parse_mode='html')
    await AddIncomeExpense.add_income_description.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ—Ö–æ–¥–∞
@dp.message_handler(state=AddIncomeExpense.add_income_description)
async def process_income_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['income_description'] = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = get_db()
        cur = conn.cursor()
        cur.execute("INSERT INTO income (amount, description) VALUES (%s, %s)", (data['income_amount'], data['income_description']))
        conn.commit()
        cur.close()
        conn.close()

    await message.reply(f'<b>–î–æ—Ö–æ–¥ {data["income_amount"]}.—Å –¥–æ–±–∞–≤–ª–µ–Ω</b>', parse_mode='html')

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥')
async def add_expense_handler(message: types.Message):
    await message.reply('<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞</b>:', parse_mode='html')
    await AddIncomeExpense.add_expense_amount.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞
@dp.message_handler(state=AddIncomeExpense.add_expense_amount)
async def process_expense_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['expense_amount'] = message.text

    await message.reply('<b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>:', parse_mode='html')
    await AddIncomeExpense.add_expense_description.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
@dp.message_handler(state=AddIncomeExpense.add_expense_description)
async def process_expense_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['expense_description'] = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = get_db()
        cur = conn.cursor()
        cur.execute("INSERT INTO expense (amount, description) VALUES (%s, %s)", (data['expense_amount'], data['expense_description']))
        conn.commit()
        cur.close()
        conn.close()

    await message.reply(f'<b>–†–∞—Å—Ö–æ–¥ {data["expense_amount"]}.—Å –¥–æ–±–∞–≤–ª–µ–Ω</b>', parse_mode='html')

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Ö–æ–¥—ã"
@dp.message_handler(text='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Ö–æ–¥—ã')
async def view_incomes_handler(message: types.Message):
    # –í–∞—à –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é get_db() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT id, description, amount FROM income")
    rows = cursor.fetchall()
     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    incomes_text = "<b>–î–æ—Ö–æ–¥—ã</b>:\n"
    total_amount = 0  # –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤
    for row in rows:
        incomes_text += f"<b>ID: {row[0]}, –û–ø–∏—Å–∞–Ω–∏–µ: {row[1]}, –°—É–º–º–∞: {row[2]}c</b>\n"
        total_amount += row[2]
        
    incomes_text += f"<b>–û–±—â–∞—è —Å—É–º–º–∞: {total_amount}.—Å</b>\n"  # –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—É–º–º—ã
    await message.reply(incomes_text, parse_mode='html')
    
    cursor.close()
    conn.close()

@dp.message_handler(text='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã')
async def view_expenses_handler(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM expense")
    expenses = cur.fetchall()
    expense = "<b>–†–∞—Å—Ö–æ–¥—ã</b>:\n"
    total_amount = 0  # –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
    for row in expenses:
        expense += f"<b>ID: {row[0]}, –û–ø–∏—Å–∞–Ω–∏–µ: {row[1]}, –°—É–º–º–∞: {row[2]}—Å</b>\n"
        total_amount += row[2]
        
    expense += f"<b>–û–±—â–∞—è —Å—É–º–º–∞: {total_amount}.—Å</b>\n"  # –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—É–º–º—ã
    if len(expenses) == 0:
        await message.reply('<b>–†–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</b>', parse_mode='html')
    else:
        await message.reply(expense, parse_mode='html')
    
    cur.close()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Ç–æ–≥"
@dp.message_handler(text='–ò—Ç–æ–≥')
async def view_total_handler(message: types.Message):
    # –í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é get_db() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = get_db()
    
    def get_total_income_expense(conn):
        cursor = conn.cursor()
        cursor.execute("SELECT SUM(amount) FROM income")
        total_income = cursor.fetchone()[0]
        cursor.execute("SELECT SUM(amount) FROM expense")
        total_expense = cursor.fetchone()[0]
        cursor.close()
        return total_income, total_expense
    
    total_income, total_expense = get_total_income_expense(conn)
    conn.close()
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    response_text = f"<b>–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income}\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_expense}</b>\n"
    if total_income > total_expense:
        response_text += "<b>–í—ã –≤ –ø—Ä–∏–±—ã–ª–∏! üòÑüöÄ</b>"
    elif total_income < total_expense:
        response_text += "<b>–í—ã –≤ —É–±—ã—Ç–∫–µ... üòûüí∏</b>"
    else:
        response_text += "<b>–í—ã –Ω–∞ –Ω—É–ª–µ. ü§∑‚Äç‚ôÇÔ∏èüí∞</b>"
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(response_text, parse_mode='html')

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)